import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'kruskals' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts WEIGHTED_INTEGER_GRAPH g as parameter.
     */

    /*
     * For the weighted graph, <name>:
     *
     * 1. The number of nodes is <name>Nodes.
     * 2. The number of edges is <name>Edges.
     * 3. An edge exists between <name>From[i] and <name>To[i]. The weight of the edge is <name>Weight[i].
     *
     */
    public static int find(int u,int[] par){
        if(par[u]==u)
            return u;
        return find(par[u],par);
    }
    public static boolean union(int u,int v,int[] par){
        int x=find(u,par);
        int y=find(v,par);
        if(x!=y){
            par[x]=y;
            return true;
        }
            return false;
    }

    public static int kruskals(int gNodes, List<Integer> gFrom, List<Integer> gTo, List<Integer> gWeight) {
              class pair implements Comparable<pair>{
                  int s;
                  int e;
                  int wei;
                  pair(int s,int e,int wei){
                      this.s=s;
                      this.e=e;
                      this.wei=wei;
                  }
                  public int compareTo(pair a){
                      return wei-a.wei;
                  }
              }
        PriorityQueue<pair> q=new PriorityQueue<pair>();
        for(int i=0;i<gFrom.size();i++){
            q.add(new pair(gFrom.get(i),gTo.get(i),gWeight.get(i)));
        }
        int[] par=new int[gNodes+1];
        for(int i=0;i<=gNodes;i++){
            par[i]=i;
        }
        int m=0;
        int cost=0;
        while(!q.isEmpty() && m<gNodes){
            pair b=q.poll();
            if(union(b.s,b.e,par)){
                m++;
                cost+=b.wei;
            }
        }
        return cost;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] gNodesEdges = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int gNodes = Integer.parseInt(gNodesEdges[0]);
        int gEdges = Integer.parseInt(gNodesEdges[1]);

        List<Integer> gFrom = new ArrayList<>();
        List<Integer> gTo = new ArrayList<>();
        List<Integer> gWeight = new ArrayList<>();

        IntStream.range(0, gEdges).forEach(i -> {
            try {
                String[] gFromToWeight = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

                gFrom.add(Integer.parseInt(gFromToWeight[0]));
                gTo.add(Integer.parseInt(gFromToWeight[1]));
                gWeight.add(Integer.parseInt(gFromToWeight[2]));
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int res = Result.kruskals(gNodes, gFrom, gTo, gWeight);

        bufferedWriter.write(String.valueOf(res));      
        bufferedReader.close();
        bufferedWriter.close();
    }
}
