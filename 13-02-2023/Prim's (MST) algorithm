import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'prims' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. 2D_INTEGER_ARRAY edges
     *  3. INTEGER start
     */

    public static int prims(int n, List<List<Integer>> edges, int start) {
      class pair implements Comparable <pair>{
          int ver;
          int wei;
          pair(int ver,int wei){
              this.ver=ver;
              this.wei=wei;
          }
          public int compareTo(pair a){
              return wei-a.wei;
          }
      }
    ArrayList<ArrayList<pair>> arr=new ArrayList<ArrayList<pair>>();
    for(int i=0;i<=n;i++){
        arr.add(new ArrayList<pair>());
    }
  for(int i=0;i<edges.size();i++){
      arr.get(edges.get(i).get(0)).add(new pair(edges.get(i).get(1),edges.get(i).get(2)));
      arr.get(edges.get(i).get(1)).add(new pair(edges.get(i).get(0),edges.get(i).get(2)));
  }
    boolean[] visit=new boolean[n+1];
    PriorityQueue<pair> q=new PriorityQueue<>();
        q.add(new pair(start,0));
        int m=0;
        int cost=0;
        while(!q.isEmpty() && m<n){
            pair w=q.poll();
            if(visit[w.ver]==false){
            cost+=w.wei;
            m++;}
            visit[w.ver]=true;
            for(pair r:arr.get(w.ver)){
                if(visit[r.ver]==false)
                    q.add(new pair(r.ver,r.wei));
            }
        }
        
        return cost;
        
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        List<List<Integer>> edges = new ArrayList<>();

        IntStream.range(0, m).forEach(i -> {
            try {
                edges.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int start = Integer.parseInt(bufferedReader.readLine().trim());

        int result = Result.prims(n, edges, start);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
