import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'roadsAndLibraries' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. INTEGER c_lib
     *  3. INTEGER c_road
     *  4. 2D_INTEGER_ARRAY cities
     */

    public static long roadsAndLibraries(int n, int c_lib, int c_road, List<List<Integer>> cities) {
    // Write your code here
        if(c_lib<=c_road){
            long r=n;
            long cc=c_lib;
            long q=r*cc;
            return q;
        }
       else{
           List<List<Integer>> arr=new ArrayList<List<Integer>>();
           for(int i=0;i<=n;i++){
               arr.add(new ArrayList<Integer>());
           }
           for(int i=0;i<cities.size();i++){
               arr.get(cities.get(i).get(0)).add(cities.get(i).get(1));
                arr.get(cities.get(i).get(1)).add(cities.get(i).get(0));
           }
           boolean[] visit=new boolean[n+1];
           long count=0;
           for(int i=1;i<n+1;i++){
               if(visit[i]==false){
                   count++;
                   dfs(i,visit,arr);
               }
           }
           long w=c_lib;
           long e=c_road;
           long ni=n;
           long d=(count*w)+((ni-count)*e);
            return d;
       }
    }
    public static void dfs(int i,boolean[] visit,List<List<Integer>> arr){
        visit[i]=true;
        for(int c:arr.get(i)){
            if(visit[c]==false)
                dfs(c,visit,arr);
        }
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        for (int qItr = 0; qItr < q; qItr++) {
            String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

            int n = Integer.parseInt(firstMultipleInput[0]);

            int m = Integer.parseInt(firstMultipleInput[1]);

            int c_lib = Integer.parseInt(firstMultipleInput[2]);

            int c_road = Integer.parseInt(firstMultipleInput[3]);

            List<List<Integer>> cities = new ArrayList<>();

            for (int i = 0; i < m; i++) {
                String[] citiesRowTempItems = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

                List<Integer> citiesRowItems = new ArrayList<>();

                for (int j = 0; j < 2; j++) {
                    int citiesItem = Integer.parseInt(citiesRowTempItems[j]);
                    citiesRowItems.add(citiesItem);
                }

                cities.add(citiesRowItems);
            }

            long result = Result.roadsAndLibraries(n, c_lib, c_road, cities);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedReader.close();
        bufferedWriter.close();
    }
}
