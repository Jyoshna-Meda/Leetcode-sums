class Solution {
    public int[][] colorBorder(int[][] grid, int row, int col, int color) {
        if(grid[row][col]==color)
           return grid;
        class pair{
            int row;
            int col;
            pair(int row,int col){
                this.row=row;
                this.col=col;
            }
        }
        Queue<pair> q=new LinkedList<>();
        boolean[][] visit=new boolean[grid.length][grid[0].length];
                int[][] grid2=new int[grid.length][grid[0].length];

        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
               grid2[i][j]=grid[i][j];
            }
        }
       int color2=grid[row][col];
       q.add(new pair(row,col));
       int[] or={-1,1,0,0};
       int[] oc={0,0,1,-1};
       visit[row][col]=true;
       while(!q.isEmpty()){
         int size = q.size();
        for(int i=1;i<=size;i++){
             pair a=q.poll();
             visit[a.row][a.col]=true;
             System.out.println(a.row+" "+a.col);
if(a.row==0 || a.col==0 || a.row==grid.length-1 || a.col== grid[0].length-1){
    grid2[a.row][a.col]=color;}
            int p=0;
    for(int m=0;m<4;m++){
        int r=a.row+or[m];
        int c=a.col+oc[m];
         System.out.println(r+" "+c+" ");
        if(r<0 || c<0 || r>=grid.length || c>= grid[0].length)
           continue;
       System.out.println(grid[r][c]);
        if(grid[r][c]==color2){
                System.out.println(r+" "+c+" "+" "+p++);

        }
        if(grid[r][c]==color2 && visit[r][c]==false)
              q.add(new pair(r,c));
        
    }
    if(p!=4){
        grid2[a.row][a.col]=color;
    
        
    }
         }
       }
       return grid2; 
    }
}
