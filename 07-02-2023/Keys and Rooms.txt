class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        boolean[] visit=new boolean[rooms.size()];
        Queue<Integer> q =new LinkedList<>();
        int count=0;
        for(int i=0;i<rooms.get(0).size();i++){
            visit[rooms.get(0).get(i)]=true;
            q.add(rooms.get(0).get(i));
        }
        while(!q.isEmpty()){
            int size=q.size();
            count+=size;
            for(int i=1;i<=size;i++){
                int a=q.poll();
                for(int j=0;j<rooms.get(a).size();j++){
                    if(visit[rooms.get(a).get(j)]==false){
                       q.add(rooms.get(a).get(j));
                       visit[rooms.get(a).get(j)]=true;
                }}
            }
        }
        if (count==rooms.size() || (count==rooms.size()-1 && visit[0]==false))
           return true;
           return false;
    }
}