/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
}
       return BST(preorder,inorder,map,0,preorder.length-1,0,inorder.length-1,new int[]{0});

    }
    public TreeNode BST(int[] pre,int[] in,HashMap<Integer,Integer> map,int ps,int pe,int is,int ie,int[] curr){
        if(curr[0]==pre.length || is>ie || ps>pe)
            return null;
        TreeNode node=new TreeNode(pre[curr[0]]);
        int i=map.get(pre[curr[0]++]);
        int left=i-is;
        node.left=BST(pre,in,map,ps+1,ps+left,is,i-1,curr);
         node.right=BST(pre,in,map,ps+left+1,pe,i+1,ie,curr);
         return node;
    }
}
